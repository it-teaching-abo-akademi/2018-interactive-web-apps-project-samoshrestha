{"version":3,"sources":["Constants.js","Components/Header.js","Helpers/AlphaVantage.js","Components/Portfolio.js","Components/Portfolios.js","App.js","index.js"],"names":["module","exports","MAX_PORTFOLIO","MAX_SYMBOLS","ALPHA_VANTAGE_KEY","ALPHA_VANTAGE_KEY_2","ALPHA_VANTAGE_KEY_3","ALPHA_VANTAGE_KEY_4","FUNCTION_TIME_SERIES","Header","props","react_default","a","createElement","className","href","AlphaVantage","Object","classCallCheck","this","getValue","_ref","asyncToGenerator","regenerator_default","mark","_callee","symbol","data","firstKey","wrap","_context","prev","next","Axios","get","url","constants","sent","abrupt","t0","keys","t1","done","value","parseFloat","toFixed","stop","_x","apply","arguments","getEuroEchangeRate","_callee2","_context2","getDailyTimeSeries","ALPHA_VANTAGE_KEY_1","getWeeklyTimeSeries","alphaVantage","Portfolio","_this","possibleConstructorReturn","getPrototypeOf","call","updateStockNameInput","e","setState","stockNameInput","target","updateQuantityInput","quantityInput","addStock","state","alert","id","parseInt","calculateTotal","total","i","stocks","length","stockValues","quantity","changeToEuro","currency","changeToDollar","showGraph","date1","date2","useDailyTimeSeries","stockSeries","pos","key","date","newData","fieldDatas","graphLoading","startDateMoment","endDateMoment","Moment","Date","Math","abs","diff","push","isBefore","isAfter","slice","reverse","concat","graphData","hideGraph","startDate","endDate","handleStartDateChange","bind","assertThisInitialized","handleEndDateChange","dateMoment","_this2","deleteStock","portfolioId","euroExchangeRate","lib","waves","onClick","style","width","height","index_esm","chartType","legendToggle","marginLeft","backgroundColor","padding","es","selected","onChange","s","m","deletePortfolio","float","title","hoverable","responsive","bordered","data-field","map","stock","header","bottomSheet","trigger","label","required","type","right","Component","Portfolios","portfolios","portfolio","Components_Portfolio","randomstring","require","App","getEuroRate","euroRate","computeStockPrices","j","addPortfolio","portfolioNameInput","portfolioName","toConsumableArray","generate","stockId","splice","updatePortfolioNameInput","_ref3","_callee3","stockName","_context3","toUpperCase","_x2","_x3","localStorage","getItem","JSON","parse","setItem","stringify","Components_Header","position","bottom","Components_Portfolios","ReactDOM","render","src_App","document","getElementById"],"mappings":"wJAGAA,EAAOC,QAAU,CACbC,cAAgB,GAChBC,YAAc,GACdC,kBAAoB,mBACpBC,oBAAsB,mBACtBC,oBAAsB,mBACtBC,oBAAsB,mBACtBC,qBAAuB,oOCEZC,EAXA,SAACC,GACZ,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAID,UAAU,cAAtB,gFCgCGE,EA/BX,SAAAA,IAAcC,OAAAC,EAAA,EAAAD,CAAAE,KAAAH,GAAAG,KAIdC,SAJa,eAAAC,EAAAJ,OAAAK,EAAA,EAAAL,CAAAM,EAAAX,EAAAY,KAID,SAAAC,EAAeC,GAAf,IAAAC,EAAAC,EAAA,OAAAL,EAAAX,EAAAiB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAEUC,IAAMC,IAAIf,KAAKgB,IAAM,YAAcC,IAAU5B,qBAAwB,WAAa4B,IAAUhC,kBAAoB,WAAWsB,GAFrI,YAEHC,EAFGG,EAAAO,MAGAV,KAAK,iBAHL,CAAAG,EAAAE,KAAA,eAAAF,EAAAQ,OAAA,UAIG,GAJH,OAAAR,EAAAS,GAAAhB,EAAAX,EAAA4B,KAMYb,EAAKA,KAAK,wBANtB,WAAAG,EAAAW,GAAAX,EAAAS,MAAAG,KAAA,CAAAZ,EAAAE,KAAA,gBAMAJ,EANAE,EAAAW,GAAAE,MAAAb,EAAAQ,OAAA,2BAAAR,EAAAQ,OAAA,SAODM,WAAWjB,EAAKA,KAAK,uBAAuBC,GAAU,sBAAsBiB,QAAQ,IAPnF,yBAAAf,EAAAgB,SAAArB,EAAAN,SAJC,gBAAA4B,GAAA,OAAA1B,EAAA2B,MAAA7B,KAAA8B,YAAA,GAAA9B,KAab+B,mBAbajC,OAAAK,EAAA,EAAAL,CAAAM,EAAAX,EAAAY,KAaQ,SAAA2B,IAAA,IAAAxB,EAAA,OAAAJ,EAAAX,EAAAiB,KAAA,SAAAuB,GAAA,cAAAA,EAAArB,KAAAqB,EAAApB,MAAA,cAAAoB,EAAApB,KAAA,EAEAC,IAAMC,IAAI,+HAFV,YAEbP,EAFayB,EAAAf,MAGTV,KAAK,iBAHI,CAAAyB,EAAApB,KAAA,eAAAoB,EAAAd,OAAA,UAIN,GAJM,cAAAc,EAAAd,OAAA,SAMVM,WAAWjB,EAAKA,KAAK,mCAAmC,sBAN9C,wBAAAyB,EAAAN,SAAAK,EAAAhC,SAbRA,KAqBbkC,mBAAqB,SAAS3B,GAE1B,OAAOO,IAAMC,IAAIf,KAAKgB,IAAM,8CAAgDC,IAAUkB,oBAAsB,WAAa5B,IAvBhHP,KAyBboC,oBAAsB,SAAS7B,GAE3B,OAAOO,IAAMC,IAAIf,KAAKgB,IAAM,+CAAiDC,IAAU/B,oBAAsB,WAAaqB,IAzB1HP,KAAKgB,IAAM,uDCFbqB,EAAe,IAAIxC,EAuPVyC,cArPX,SAAAA,IAAa,IAAAC,EAAA,OAAAzC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsC,IACTC,EAAAzC,OAAA0C,EAAA,EAAA1C,CAAAE,KAAAF,OAAA2C,EAAA,EAAA3C,CAAAwC,GAAAI,KAAA1C,QAoCJ2C,qBAAuB,SAACC,GAEpBL,EAAKM,SAAS,CACVC,eAAiBF,EAAEG,OAAOvB,SAxCrBe,EA2CbS,oBAAsB,SAACJ,GAEnBL,EAAKM,SAAS,CACVI,cAAgBL,EAAEG,OAAOvB,SA9CpBe,EAiDbW,SAjDapD,OAAAK,EAAA,EAAAL,CAAAM,EAAAX,EAAAY,KAiDF,SAAAC,IAAA,OAAAF,EAAAX,EAAAiB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAEH0B,EAAKY,MAAMF,eACXG,MAAM,8BAHHzC,EAAAE,KAAA,EAME0B,EAAKhD,MAAM2D,SAASX,EAAKhD,MAAM8D,GAAGd,EAAKY,MAAML,eAAeQ,SAASf,EAAKY,MAAMF,gBANlF,WAAAtC,EAAAO,KAAA,CAAAP,EAAAE,KAAA,QAOHuC,MAAM,6BAPHzC,EAAAE,KAAA,eASHuC,MAAM,0BATH,wBAAAzC,EAAAgB,SAAArB,EAAAN,SAjDEuC,EA6DbgB,eAAiB,WAGb,IADA,IAAIC,EAAQ,EACJC,EAAI,EAAGA,EAAIlB,EAAKhD,MAAMmE,OAAOC,OAAQF,IACzCD,GAASjB,EAAKhD,MAAMqE,YAAYrB,EAAKhD,MAAMmE,OAAOD,GAAGlD,QAAUgC,EAAKhD,MAAMmE,OAAOD,GAAGI,SAExF,OAAOL,EAAQ,IAnENjB,EAqEbuB,aAAe,WAEXvB,EAAKM,SAAS,CACVkB,SAAW,UAxENxB,EA2EbyB,eAAiB,WAEbzB,EAAKM,SAAS,CACVkB,SAAW,YA9ENxB,EAiFb0B,UAjFanE,OAAAK,EAAA,EAAAL,CAAAM,EAAAX,EAAAY,KAiFD,SAAA2B,IAAA,IAAAkC,EAAAC,EAAAC,EAAAV,EAAAlD,EAAAiD,EAAAY,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAtE,EAAAX,EAAAiB,KAAA,SAAAuB,GAAA,cAAAA,EAAArB,KAAAqB,EAAApB,MAAA,OAGR0B,EAAKM,SAAS,CACV8B,cAAe,IAEfT,EAAQ3B,EAAKY,MAAMyB,gBACnBT,EAAQ5B,EAAKY,MAAM0B,cACnBT,GAAqB,EAEf,MAAPF,GAAwB,MAATC,IACdA,EAAQW,IAAO,IAAIC,OAGX,MAATb,GAA0B,MAATC,EAChBC,GAAqB,EAER,MAATF,GAAyB,MAARC,GAElBa,KAAKC,IAAIf,EAAMgB,KAAKf,EAAM,SAAW,MACpCC,GAAqB,GAGzBV,EAASnB,EAAKhD,MAAMmE,OAEpBlD,EAAO,CAAC,CAAC,WACLiD,EAAI,EA1BJ,YA0BOA,EAAIC,EAAOC,QA1BlB,CAAA1B,EAAApB,KAAA,YA2BJL,EAAK,GAAG2E,KAAKzB,EAAOD,GAAGlD,SACpB6D,EA5BC,CAAAnC,EAAApB,KAAA,gBAAAoB,EAAApB,KAAA,GA6ByBwB,EAAaH,mBAAmBwB,EAAOD,GAAGlD,QA7BnE,QA6BI8D,EA7BJpC,EAAAf,KA6B4EV,KAAK,uBA7BjFyB,EAAApB,KAAA,wBAAAoB,EAAApB,KAAA,GA+ByBwB,EAAaD,oBAAoBsB,EAAOD,GAAGlD,QA/BpE,QA+BI8D,EA/BJpC,EAAAf,KA+B6EV,KAAK,+BA/BlF,WAgCA6D,EAhCA,CAAApC,EAAApB,KAAA,gBAiCAuC,MAAM,oDAjCNnB,EAAAd,OAAA,kBAoCAmD,EAAM,EApCNrC,EAAAb,GAAAhB,EAAAX,EAAA4B,KAqCWgD,GArCX,YAAApC,EAAAX,GAAAW,EAAAb,MAAAG,KAAA,CAAAU,EAAApB,KAAA,YAqCI0D,EArCJtC,EAAAX,GAAAE,MAsCIgD,EAAOM,IAAOP,GAEN,MAATL,IAAiBM,EAAKY,SAASlB,GAxClC,CAAAjC,EAAApB,KAAA,gBAAAoB,EAAAd,OAAA,uBA4CY,MAATgD,IAAiBK,EAAKa,QAAQlB,GA5CjC,CAAAlC,EAAApB,KAAA,gBAAAoB,EAAAd,OAAA,oBAgDGX,EAAKmD,QAAUW,GAEd9D,EAAK2E,KAAK,CAACZ,IAEf/D,EAAK8D,GAAKa,KAAK1D,WAAW4C,EAAYE,GAAK,cAC3CD,IArDArC,EAAApB,KAAA,iBA0B0B4C,IA1B1BxB,EAAApB,KAAA,gBA0DJ4D,EAAU,CAACjE,EAAK,KAEhBkE,EAAalE,EAAK8E,MAAM,IAEjBC,UAEPd,EAAUA,EAAQe,OAAOd,GAE7BnC,EAAKM,SAAS,CACVoB,WAAY,EACZwB,UAAYhB,EACZE,cAAe,IArEX,yBAAA1C,EAAAN,SAAAK,EAAAhC,SAjFCuC,EAyJbmD,UAAY,WAERnD,EAAKM,SAAS,CACVoB,WAAY,KA1JhB1B,EAAKY,MAAQ,CACTL,eAAiB,GACjBG,cAAgB,GAChBc,SAAW,SACXE,WAAY,EACZwB,UAAY,GACZE,UAAW,KACXf,gBAAkB,KAClBgB,QAAU,KACVf,cAAgB,KAChBF,cAAe,GAEnBpC,EAAKsD,sBAAwBtD,EAAKsD,sBAAsBC,KAA3BhG,OAAAiG,EAAA,EAAAjG,QAAAiG,EAAA,EAAAjG,CAAAyC,KAC7BA,EAAKyD,oBAAsBzD,EAAKyD,oBAAoBF,KAAzBhG,OAAAiG,EAAA,EAAAjG,QAAAiG,EAAA,EAAAjG,CAAAyC,KAflBA,6HAiBeiC,gFAEpByB,EAAanB,IAAON,YAClBxE,KAAK6C,SAAS,CAClB8C,UAAWnB,EACXI,gBAAkBqB,WAGpBjG,KAAKiE,mMAEiBO,gFAElByB,EAAanB,IAAON,YAClBxE,KAAK6C,SAAS,CAChB+C,QAASpB,EACTK,cAAgBoB,WAGpBjG,KAAKiE,gJA4HD,IAAAiC,EAAAlG,KAEAmG,EAAcnG,KAAKT,MAAM4G,YACzBC,EAAcpG,KAAKT,MAAM8D,GACzBO,EAAc5D,KAAKT,MAAMqE,YACzByC,EAAmBrG,KAAKT,MAAM8G,iBAAiB3E,QAAQ,GACvDqC,EAAW/D,KAAKmD,MAAMY,SAC1B,OACI/D,KAAKmD,MAAMc,UAAWzE,EAAAC,EAAAC,cAAA,WAClBF,EAAAC,EAAAC,cAAC4G,EAAA,OAAD,CAAQC,MAAM,QAAQC,QAAWxG,KAAK0F,WAAtC,QACC1F,KAAKmD,MAAMwB,aACRnF,EAAAC,EAAAC,cAAA,OAAK+G,MAAO,CAACC,MAAQ,OAAQC,OAAS,UAClCnH,EAAAC,EAAAC,cAAA,8BAELF,EAAAC,EAAAC,cAACkH,EAAA,EAAD,CACCC,UAAU,YACVrG,KAAMR,KAAKmD,MAAMsC,UACjBiB,MAAM,OACNC,OAAO,QACPG,cAAY,IAEhBtH,EAAAC,EAAAC,cAAA,OAAK+G,MAAO,CAACC,MAAM,OAAQK,WAAa,OAAQC,gBAAkB,OAAOC,QAAQ,SAC7EzH,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAACwH,EAAA,EAAD,CACIC,SAAUnH,KAAKmD,MAAMwC,UACrByB,SAAUpH,KAAK6F,wBAEnBrG,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAACwH,EAAA,EAAD,CACIC,SAAUnH,KAAKmD,MAAMyC,QACrBwB,SAAUpH,KAAKgG,wBAGlBxG,EAAAC,EAAAC,cAAC4G,EAAA,IAAD,CAAKe,EAAG,GAAIC,EAAG,GACpB9H,EAAAC,EAAAC,cAAC4G,EAAA,UAAD,KACuB,WAAtBtG,KAAKmD,MAAMY,SAAoBvE,EAAAC,EAAAC,cAAC4G,EAAA,OAAD,CAAQC,MAAM,QAAQC,QAASxG,KAAK8D,cAApC,iBAAyEtE,EAAAC,EAAAC,cAAC4G,EAAA,OAAD,CAAQC,MAAM,QAAQC,QAASxG,KAAKgE,gBAApC,mBACrGxE,EAAAC,EAAAC,cAAA,KAAG8G,QAAS,kBAAIN,EAAK3G,MAAMgI,gBAAgBrB,EAAK3G,MAAM8D,MAAK7D,EAAAC,EAAAC,cAAA,KAAGC,UAAU,0BAA0B8G,MAAO,CAACe,MAAM,UAArD,WAC3DhI,EAAAC,EAAAC,cAAA,UAAKM,KAAKT,MAAMkI,OAChBjI,EAAAC,EAAAC,cAAC4G,EAAA,MAAD,CAAOoB,WAAW,EAAMC,YAAY,EAAMC,UAAU,GAChDpI,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAImI,aAAW,QAAf,QACArI,EAAAC,EAAAC,cAAA,MAAImI,aAAW,aAAf,cACArI,EAAAC,EAAAC,cAAA,MAAImI,aAAW,YAAf,YACArI,EAAAC,EAAAC,cAAA,MAAImI,aAAW,SAAf,SACArI,EAAAC,EAAAC,cAAA,MAAImI,aAAW,UAAf,YAGRrI,EAAAC,EAAAC,cAAA,aAEQM,KAAKT,MAAMmE,OAAOoE,IAAI,SAASC,GAC3B,OACIvI,EAAAC,EAAAC,cAAA,MAAI6E,IAAKwD,EAAM1E,IACX7D,EAAAC,EAAAC,cAAA,UAAKqI,EAAMxH,QACXf,EAAAC,EAAAC,cAAA,UAAgB,WAAXqE,EAAoB,IAAK,SAAgB,WAAXA,GAA+C,EAA1BH,EAAYmE,EAAMxH,SAAamB,QAAQ,IAAIkC,EAAYmE,EAAMxH,QAAQ8F,GAAkB3E,QAAQ,IACvJlC,EAAAC,EAAAC,cAAA,UAAKqI,EAAMlE,UACXrE,EAAAC,EAAAC,cAAA,UAAgB,WAAXqE,EAAoB,IAAK,SAAgB,WAAXA,GAAqBgE,EAAMlE,SAAWD,EAAYmE,EAAMxH,QAAU,GAAKmB,QAAQ,GAAGqG,EAAMlE,UAAYD,EAAYmE,EAAMxH,QAAQ8F,GAAkB3E,QAAQ,IAC3LlC,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,KAAG8G,QAAS,kBAAIL,EAAYC,EAAY2B,EAAM1E,MAAK7D,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gCAAb,iBAQ/EH,EAAAC,EAAAC,cAAA,2BAA8B,WAAXqE,EAAoB,IAAK,SAAgB,WAAXA,GAA2C,EAAtB/D,KAAKuD,kBAAsB7B,QAAQ,IAAI1B,KAAKuD,iBAAiB8C,GAAkB3E,QAAQ,IAC7JlC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC4G,EAAA,MAAD,CAAO0B,OAAO,YAAYC,aAAW,EACjCC,QAAS1I,EAAAC,EAAAC,cAAA,KAAGC,UAAU,sCAAqCH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,uBAAb,OAAlD,gBACTH,EAAAC,EAAAC,cAAC4G,EAAA,IAAD,KACI9G,EAAAC,EAAAC,cAAC4G,EAAA,MAAD,CAAOe,EAAG,GAAIc,MAAM,eAAe9E,GAAG,aAAa+D,SAAUpH,KAAK2C,qBAAsByF,UAAQ,IAChG5I,EAAAC,EAAAC,cAAC4G,EAAA,MAAD,CAAOe,EAAG,GAAIc,MAAM,WAAW9E,GAAG,WAAW+D,SAAUpH,KAAKgD,oBAAqBqF,KAAK,SAASD,UAAQ,IACvG5I,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC4G,EAAA,OAAD,CAAQC,MAAM,QAAQC,QAASxG,KAAKkD,UAApC,SAAoD1D,EAAAC,EAAAC,cAAC4G,EAAA,KAAD,CAAMgC,OAAK,GAAX,WAI5D9I,EAAAC,EAAAC,cAAA,KAAGC,UAAU,qDAAqD6G,QAAWxG,KAAKiE,WAAlF,wBA/OIsE,aCoBTC,mLAnBP,IAAItF,EAAWlD,KAAKT,MAAM2D,SACtBqE,EAAkBvH,KAAKT,MAAMgI,gBAC7BpB,EAAcnG,KAAKT,MAAM4G,YACzBvC,EAAc5D,KAAKT,MAAMqE,YACzByC,EAAmBrG,KAAKT,MAAM8G,iBAClC,OACI7G,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC4G,EAAA,IAAD,KAEQtG,KAAKT,MAAMkJ,WAAWX,IAAI,SAASY,GAC/B,OAASlJ,EAAAC,EAAAC,cAACiJ,EAAD,CAAWlB,MAAOiB,EAAUjB,MAAOlD,IAAKmE,EAAUrF,GAAIA,GAAIqF,EAAUrF,GAAIK,OAAQgF,EAAUhF,OAAQR,SAAUA,EAAUqE,gBAAiBA,EAAiBpB,YAAaA,EAAavC,YAAaA,EAAayC,iBAAkBA,eAhB1OkC,aCGnBK,EAAeC,EAAQ,KACzBxG,EAAe,IAAIxC,EAwKRiJ,cArKb,SAAAA,IAAa,IAAAvG,EAAAzC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8I,IACXvG,EAAAzC,OAAA0C,EAAA,EAAA1C,CAAAE,KAAAF,OAAA2C,EAAA,EAAA3C,CAAAgJ,GAAApG,KAAA1C,QAoBF+I,YArBajJ,OAAAK,EAAA,EAAAL,CAAAM,EAAAX,EAAAY,KAqBC,SAAAC,IAAA,IAAA0I,EAAA,OAAA5I,EAAAX,EAAAiB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAESwB,EAAaN,qBAFtB,QAERiH,EAFQrI,EAAAO,MAIVqB,EAAKM,SAAS,CACZwD,iBAAmB2C,IAGrB5F,MAAM,sCARI,wBAAAzC,EAAAgB,SAAArB,EAAAN,SArBDuC,EAgCb0G,mBAhCanJ,OAAAK,EAAA,EAAAL,CAAAM,EAAAX,EAAAY,KAgCQ,SAAA2B,IAAA,IAAAyB,EAAAyF,EAAA1H,EAAAoC,EAAA,OAAAxD,EAAAX,EAAAiB,KAAA,SAAAuB,GAAA,cAAAA,EAAArB,KAAAqB,EAAApB,MAAA,OAEX4C,EAAI,EAFO,YAEJA,EAAIlB,EAAKY,MAAMsF,WAAW9E,QAFtB,CAAA1B,EAAApB,KAAA,SAGTqI,EAAE,EAHO,YAGLA,EAAI3G,EAAKY,MAAMsF,WAAWhF,GAAGC,OAAOC,QAH/B,CAAA1B,EAAApB,KAAA,gBAAAoB,EAAApB,KAAA,EAIKwB,EAAapC,SAASsC,EAAKY,MAAMsF,WAAWhF,GAAGC,OAAOwF,GAAG3I,QAJ9D,OAITiB,EAJSS,EAAAf,MAKT0C,EAAcrB,EAAKY,MAAMS,aACjBrB,EAAKY,MAAMsF,WAAWhF,GAAGC,OAAOwF,GAAG3I,QAAUiB,EACzDe,EAAKM,SAAS,CACZe,gBARW,QAGuCsF,IAHvCjH,EAAApB,KAAA,gBAE8B4C,IAF9BxB,EAAApB,KAAA,iCAAAoB,EAAAN,SAAAK,EAAAhC,SAhCRuC,EA6Cb4G,aAAe,SAACvG,GAGd,GAAGL,EAAKY,MAAMsF,WAAW9E,SAAW1C,IAAUlC,cAC5CqE,MAAM,6CAIN,GAAGb,EAAKY,MAAMiG,mBACd,CACE,IAAIC,EAAgB9G,EAAKY,MAAMiG,mBAC/B7G,EAAKM,SAAS,CACZ4F,WAAU3I,OAAAwJ,EAAA,EAAAxJ,CAAOyC,EAAKY,MAAMsF,YAAlBjD,OAAA,CAA6B,CACrCnC,GAAKuF,EAAaW,WAClB9B,MAAQ4B,EACR3F,OAAS,OAEX,WACAN,MAAM,qCAIRA,MAAM,iCAnECb,EAsEb4D,YAAc,SAACC,EAAYoD,GAGzB,IADA,IAAIf,EAAalG,EAAKY,MAAMsF,WACpBhF,EAAI,EAAGA,EAAIgF,EAAW9E,OAAQF,IAEpC,GAAGgF,EAAWhF,GAAGJ,KAAO+C,EAAY,CAGlC,IAFA,IAAI1C,EAASnB,EAAKY,MAAMsF,WAAWhF,GAAGC,OAE9BwF,EAAI,EAAGA,EAAIxF,EAAOC,OAAQuF,IAChC,GAAGxF,EAAOwF,GAAG7F,KAAOmG,EAAQ,CAE1B9F,EAAO+F,OAAOP,EAAE,GAChBT,EAAWhF,GAAGC,OAASA,EACvBnB,EAAKM,SAAS,CACZ4F,WAAaA,IAEf,MAGJ,QAzFOlG,EA6FbgF,gBAAkB,SAACnB,GAGjB,IAFA,IAAIqC,EAAalG,EAAKY,MAAMsF,WAEpBhF,EAAI,EAAGA,EAAIgF,EAAW9E,OAAQF,IACpC,GAAGgF,EAAWhF,GAAGJ,KAAO+C,EAAY,CAElCqC,EAAWgB,OAAOhG,EAAE,GACpBlB,EAAKM,SAAS,CACZ4F,WAAaA,IAEf,QAvGOlG,EA4GbmH,yBAA2B,SAAC9G,GAE1BL,EAAKM,SAAS,CACZuG,mBAAqBxG,EAAEG,OAAOvB,SA/GrBe,EAkHbW,SAlHa,eAAAyG,EAAA7J,OAAAK,EAAA,EAAAL,CAAAM,EAAAX,EAAAY,KAkHF,SAAAuJ,EAAOxD,EAAYyD,EAAUhG,GAA7B,IAAArC,EAAAoC,EAAA6E,EAAAhF,EAAA,OAAArD,EAAAX,EAAAiB,KAAA,SAAAoJ,GAAA,cAAAA,EAAAlJ,KAAAkJ,EAAAjJ,MAAA,cAAAiJ,EAAAjJ,KAAA,EAGSwB,EAAapC,SAAS4J,GAH/B,UAGLrI,EAHKsI,EAAA5I,MAIL0C,EAAcrB,EAAKY,MAAMS,aACjBiG,EAAUE,eAAiBvI,EACvCe,EAAKM,SAAS,CACZe,gBAGEpC,EAVK,CAAAsI,EAAAjJ,KAAA,gBAWPuC,MAAM,kBAXC0G,EAAA3I,OAAA,UAYA,GAZA,QAeHsH,EAAalG,EAAKY,MAAMsF,WACpBhF,EAAI,EAhBL,aAgBQA,EAAIgF,EAAW9E,QAhBvB,CAAAmG,EAAAjJ,KAAA,YAiBF4H,EAAWhF,GAAGJ,KAAO+C,EAjBnB,CAAA0D,EAAAjJ,KAAA,YAkBA4H,EAAWhF,GAAGC,OAAOC,SAAW1C,IAAUjC,YAlB1C,CAAA8K,EAAAjJ,KAAA,gBAmBDuC,MAAM,kDAnBL0G,EAAA3I,OAAA,UAoBM,GApBN,QAsBHsH,EAAWhF,GAAGC,OAAOyB,KAAK,CAAC9B,GAAKuF,EAAaW,WAAWhJ,OAASsJ,EAAUE,cAAcvI,MAAQA,EAAOqC,SAAUA,IAClHtB,EAAKM,SAAS,CACZ4F,eAxBC,QAgB+BhF,IAhB/BqG,EAAAjJ,KAAA,wBAAAiJ,EAAA3I,OAAA,UA6BF,GA7BE,yBAAA2I,EAAAnI,SAAAiI,EAAA5J,SAlHE,gBAAA4B,EAAAoI,EAAAC,GAAA,OAAAN,EAAA9H,MAAA7B,KAAA8B,YAAA,GAEXS,EAAKY,MAAQ,CACXiG,mBAAqB,KACrBX,WAAa,GACb7E,YAAc,GACdyC,iBAAmB,GAGrB,IAAIoC,EAAayB,aAAaC,QAAQ,cAT3B,OAUR1B,IACDlG,EAAKY,MAAMsF,WAAa2B,KAAKC,MAAM5B,IAErClG,EAAK0G,qBAEL1G,EAAKwG,cAfMxG,oFAmBX2H,aAAaI,QAAQ,aAAaF,KAAKG,UAAUvK,KAAKmD,MAAMsF,8CA+H5D,OACEjJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC8K,EAAD,MACAhL,EAAAC,EAAAC,cAAC4G,EAAA,MAAD,CAAO0B,OAAO,gBAAgBC,aAAW,EAAC5E,GAAG,kBAC3C6E,QAAS1I,EAAAC,EAAAC,cAAA,KAAGE,KAAK,iBAAiBD,UAAU,4DAA4D8G,MAAO,CAACgE,SAAW,QAAQC,OAAS,MAAOpC,MAAQ,QAAS9I,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAb,SACpKH,EAAAC,EAAAC,cAAC4G,EAAA,IAAD,KACE9G,EAAAC,EAAAC,cAAC4G,EAAA,MAAD,CAAOe,EAAG,GAAIc,MAAM,iBAAiB9E,GAAG,gBAAgB+D,SAAUpH,KAAK0J,yBAA0BtB,UAAQ,IACzG5I,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC4G,EAAA,OAAD,CAAQC,MAAM,QAAQC,QAASxG,KAAKmJ,cAApC,SAAwD3J,EAAAC,EAAAC,cAAC4G,EAAA,KAAD,CAAMgC,OAAK,GAAX,WAK5D9I,EAAAC,EAAAC,cAACiL,EAAD,CAAYlC,WAAYzI,KAAKmD,MAAMsF,WAAYvF,SAAUlD,KAAKkD,SAAUqE,gBAAiBvH,KAAKuH,gBAAiBpB,YAAanG,KAAKmG,YAAcvC,YAAa5D,KAAKmD,MAAMS,YAAayC,iBAAkBrG,KAAKmD,MAAMkD,2BAjKvMkC,aCLlBqC,IAASC,OAAOrL,EAAAC,EAAAC,cAACoL,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.d498dc20.chunk.js","sourcesContent":["/*\r\n    This module stores all the constant values required for the application\r\n*/\r\nmodule.exports = {\r\n    MAX_PORTFOLIO : 10,\r\n    MAX_SYMBOLS : 50,\r\n    ALPHA_VANTAGE_KEY : 'FZ5782SHF692JV73',\r\n    ALPHA_VANTAGE_KEY_2 : '1IV0FFNEFTB5KDDQ',\r\n    ALPHA_VANTAGE_KEY_3 : 'AVJWG8L8PN94JDXO',\r\n    ALPHA_VANTAGE_KEY_4 : '11OITLZ6A9F4BGOE',\r\n    FUNCTION_TIME_SERIES : 'TIME_SERIES_DAILY_ADJUSTED'\r\n};","import React from 'react';\r\nconst Header = (props)=>{\r\n    return(\r\n      <div className=\"navbar-fixed\">\r\n        <nav className=\"nav-wrapper blue lighten-1\">\r\n          <div className=\"container\">\r\n            <a href=\"/\" className=\"brand-logo\">SPMS</a>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n    );\r\n}\r\nexport default Header;","/*\r\n    This is the helper calss for the AlphaVantage API\r\n*/\r\nimport constants from '../Constants';\r\nimport Axios from 'axios';\r\n\r\nclass AlphaVantage{\r\n    constructor(){\r\n        //The base url for the API\r\n        this.url = \"https://www.alphavantage.co/query?\";\r\n    }\r\n    getValue =  async function(symbol){\r\n        //This function fetches the current value of that stock\r\n        var  data = await Axios.get(this.url + \"function=\" + constants.FUNCTION_TIME_SERIES +  '&apikey=' + constants.ALPHA_VANTAGE_KEY + '&symbol='+symbol);\r\n        if(data.data[\"Error Message\"]){\r\n            return false;\r\n        }\r\n        for(var firstKey in data.data[\"Time Series (Daily)\"]) break;\r\n        return parseFloat(data.data[\"Time Series (Daily)\"][firstKey][\"5. adjusted close\"]).toFixed(2);\r\n    }\r\n    getEuroEchangeRate = async function(){\r\n        //Fetches the forex exchange rate for dollar to eur\r\n        var data = await Axios.get(\"https://www.alphavantage.co/query?function=CURRENCY_EXCHANGE_RATE&from_currency=USD&to_currency=EUR&apikey=11OITLZ6A9F4BGOE\");\r\n        if(data.data[\"Error Message\"]){\r\n            return false;\r\n        }\r\n        return parseFloat(data.data[\"Realtime Currency Exchange Rate\"][\"5. Exchange Rate\"]);\r\n    }\r\n    getDailyTimeSeries = function(symbol) {\r\n        //Returns the daily time series for a symbol\r\n        return Axios.get(this.url + \"function=TIME_SERIES_DAILY_ADJUSTED&apikey=\" + constants.ALPHA_VANTAGE_KEY_1 + '&symbol=' + symbol);\r\n    }\r\n    getWeeklyTimeSeries = function(symbol) {\r\n        //Returns the weekly times series for a symbol\r\n        return Axios.get(this.url + \"function=TIME_SERIES_WEEKLY_ADJUSTED&apikey=\" + constants.ALPHA_VANTAGE_KEY_2 + '&symbol=' + symbol);\r\n    }\r\n}\r\n\r\nexport default AlphaVantage;","import React,{Component} from 'react';\r\nimport {Col,CardPanel,Table,Modal,Row,Input,Button,Icon} from 'react-materialize';\r\nimport { Chart } from \"react-google-charts\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport AlphaVantage from '../Helpers/AlphaVantage';\r\nimport Moment from 'moment';\r\nconst alphaVantage = new AlphaVantage();\r\nclass Portfolio extends Component{\r\n    constructor(){  \r\n        super();\r\n        this.state = {\r\n            stockNameInput : '',  //Input from the create stock form\r\n            quantityInput : '', // Input from the quantity input\r\n            currency : 'dollar', //The current curency \r\n            showGraph : false, //Triggers the graph\r\n            graphData : [], //Graph data to be filled for google graphs \r\n            startDate: null, //Start date from the form\r\n            startDateMoment : null, //Start date moment object\r\n            endDate : null, //End date from the form\r\n            endDateMoment : null, //End date moment object\r\n            graphLoading : false //true when the graph is loading\r\n        }\r\n        this.handleStartDateChange = this.handleStartDateChange.bind(this); //Required by the Date Input library\r\n        this.handleEndDateChange = this.handleEndDateChange.bind(this);\r\n    }\r\n    async handleStartDateChange(date) {\r\n        //This function is called when the date is changed in the select start date for graph input.\r\n        var dateMoment = Moment(date);\r\n        await this.setState({\r\n          startDate: date,\r\n          startDateMoment : dateMoment\r\n        });\r\n        //Recompute the graph values\r\n        this.showGraph();\r\n    }\r\n    async handleEndDateChange(date) {\r\n        //This function is called when the date is changed in the select end date for graph input.\r\n        var dateMoment = Moment(date);\r\n        await this.setState({\r\n            endDate :date,\r\n            endDateMoment : dateMoment\r\n        });\r\n        //Recompute the graph value\r\n        this.showGraph();\r\n    }\r\n    updateStockNameInput = (e)=>{\r\n        //Stock Name input handler for create stock form\r\n        this.setState({\r\n            stockNameInput : e.target.value\r\n        });\r\n    }\r\n    updateQuantityInput = (e)=>{\r\n        //Quantity input handler for create stock form\r\n        this.setState({\r\n            quantityInput : e.target.value\r\n        })\r\n    }\r\n    addStock = async ()=>{\r\n        //This function iscalled when the add form is submitted for adding stock\r\n        if(!this.state.quantityInput){\r\n            alert(\"Quantity must be specified\");\r\n        }\r\n        //Call the addStock passed from the parent fucntion.\r\n        if(await this.props.addStock(this.props.id,this.state.stockNameInput,parseInt(this.state.quantityInput))){\r\n            alert(\"Stock created succesfully\");\r\n        }else{\r\n            alert(\"Failed to create stock\");\r\n        }\r\n    }\r\n    calculateTotal = ()=>{\r\n        //Calculate the value of all the stocks in this portfolio\r\n        var total = 0;\r\n        for(let i = 0; i < this.props.stocks.length; i++){\r\n            total += this.props.stockValues[this.props.stocks[i].symbol] * this.props.stocks[i].quantity;\r\n        }\r\n        return total + '';\r\n    }\r\n    changeToEuro = ()=>{\r\n        //Changes the currency state to euro.\r\n        this.setState({\r\n            currency : 'euro'\r\n        });\r\n    }\r\n    changeToDollar = ()=>{\r\n        //Changes the currenct state to dollars.\r\n        this.setState({\r\n            currency : 'dollar'\r\n        });\r\n    }\r\n    showGraph = async ()=>{\r\n        //Computes the graph values for google charts.\r\n        //Set the graphLoading to true to show that the graph is loading in the UI\r\n        this.setState({\r\n            graphLoading : true\r\n        });\r\n        var date1 = this.state.startDateMoment;\r\n        var date2 = this.state.endDateMoment;\r\n        var useDailyTimeSeries = true;   //If dailyTimesSeries is false it will compute the weekly timeseries\r\n        //If end date is vacant but start date is there, keep end date as current date\r\n        if(date1!=null && date2 == null){\r\n            date2 = Moment(new Date());\r\n        }\r\n        //if start date is vacant but end date is there use weeklyTimeSeries so as to get a bigger margin.(till 1980)\r\n        if(date1 == null && date2 != null){\r\n            useDailyTimeSeries = false;\r\n        }      \r\n        else if(date1 != null && date2 !=null){\r\n            //If both are available, set to weekly time series if the difference in dates are more than 4 months.\r\n            if(Math.abs(date1.diff(date2,'days')) > 4 * 30){\r\n                useDailyTimeSeries = false;\r\n            }\r\n        }\r\n        var stocks = this.props.stocks;\r\n        //Convert the data recieved from API to google charts data format.\r\n        var data = [[\"Stocks\"]];\r\n        for(var i = 0; i < stocks.length; i++){\r\n            data[0].push(stocks[i].symbol);\r\n            if(useDailyTimeSeries)\r\n                var stockSeries = (await alphaVantage.getDailyTimeSeries(stocks[i].symbol)).data[\"Time Series (Daily)\"];\r\n            else    \r\n                var stockSeries = (await alphaVantage.getWeeklyTimeSeries(stocks[i].symbol)).data[\"Weekly Adjusted Time Series\"];\r\n            if(!stockSeries){\r\n                alert(\"Free API limit has expired. Please wait 1 minute\");\r\n                return; \r\n            }\r\n            var pos = 1;\r\n            for(var key in stockSeries){\r\n                var date = Moment(key);\r\n                //Filter to check if the date is before the startDate\r\n                if(date1 != null && date.isBefore(date1)){\r\n                    break;\r\n                }\r\n                //Filter to check if the date is after the endDate\r\n                if(date2 != null && date.isAfter(date2)){\r\n                    break;\r\n                }\r\n                //If its a new symbol create anoher column\r\n                if(data.length == pos)\r\n                {\r\n                    data.push([key]);\r\n                }\r\n                data[pos].push(parseFloat(stockSeries[key][\"4. close\"]));\r\n                pos++;\r\n            }\r\n        };\r\n        //The data is originally in descending order of dates. convert to ascending\r\n        //Get the headers\r\n        var newData = [data[0]];\r\n        //Get the body\r\n        var fieldDatas = data.slice(1);\r\n        //Reverse the body\r\n        fieldDatas.reverse();\r\n        //Combine the header and body\r\n        var newData = newData.concat(fieldDatas);\r\n        //Set the state.\r\n        this.setState({\r\n            showGraph : true,\r\n            graphData : newData,\r\n            graphLoading : false\r\n        });\r\n    }\r\n    hideGraph = ()=>{\r\n        //Hides the graph\r\n        this.setState({\r\n            showGraph : false\r\n        });\r\n    }\r\n    render(){\r\n        //Get props to loc\r\n        var deleteStock = this.props.deleteStock;\r\n        var portfolioId = this.props.id;\r\n        var stockValues = this.props.stockValues;\r\n        var euroExchangeRate = this.props.euroExchangeRate.toFixed(2);\r\n        var currency = this.state.currency;\r\n        return(        \r\n            this.state.showGraph?(<div>\r\n                <Button waves='light' onClick = {this.hideGraph}>Back</Button>\r\n                {this.state.graphLoading?(\r\n                    <div style={{width : '100%', height : '400px'}}>\r\n                        <p>Graph is loading</p>\r\n                    </div>\r\n                ):(<Chart\r\n                    chartType=\"LineChart\"\r\n                    data={this.state.graphData}\r\n                    width=\"100%\"\r\n                    height=\"400px\"\r\n                    legendToggle\r\n                />)}\r\n                <div style={{width:'50vh', marginLeft : '40px', backgroundColor : '#ccf',padding:'30px'}}>\r\n                    <h6>Filters</h6>\r\n                    <p>Start Date</p>\r\n                    <DatePicker\r\n                        selected={this.state.startDate}\r\n                        onChange={this.handleStartDateChange}\r\n                    />\r\n                    <p>End Date</p>\r\n                    <DatePicker\r\n                        selected={this.state.endDate}\r\n                        onChange={this.handleEndDateChange}\r\n                    />\r\n                </div>\r\n            </div>):(<Col s={12} m={5}>\r\n                <CardPanel>\r\n                {this.state.currency==='dollar'?<Button waves='light' onClick={this.changeToEuro}>Show in Euros</Button>:<Button waves='light' onClick={this.changeToDollar}>Show In Dollars</Button>}\r\n                    <a onClick={()=>this.props.deletePortfolio(this.props.id)}><i className=\"material-icons red-text\" style={{float:'right'}} >delete</i></a>\r\n                    <h4>{this.props.title}</h4>                  \r\n                    <Table hoverable={true} responsive={true} bordered={true}>\r\n                        <thead>\r\n                            <tr>\r\n                                <th data-field=\"name\">Name</th>\r\n                                <th data-field=\"unitValue\">Unit Value</th>\r\n                                <th data-field=\"quantity\">Quantity</th>\r\n                                <th data-field=\"total\">Total</th>\r\n                                <th data-field=\"delete\">Delete</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                this.props.stocks.map(function(stock){\r\n                                    return (\r\n                                        <tr key={stock.id}>\r\n                                            <td>{stock.symbol}</td>\r\n                                            <td>{currency==='dollar'?'$': '€'}{currency==='dollar'?(stockValues[stock.symbol]*1.0).toFixed(2):(stockValues[stock.symbol]*euroExchangeRate).toFixed(2)}</td>\r\n                                            <td>{stock.quantity}</td>\r\n                                            <td>{currency==='dollar'?'$': '€'}{currency==='dollar'?(stock.quantity * stockValues[stock.symbol] * 1.0).toFixed(2):stock.quantity * (stockValues[stock.symbol]*euroExchangeRate).toFixed(2)}</td>\r\n                                            <td>\r\n                                                <a onClick={()=>deleteStock(portfolioId,stock.id)}><i className=\"material-icons red-text tiny\">delete</i></a>\r\n                                            </td>   \r\n                                        </tr>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </tbody>\r\n                    </Table>\r\n                    <h6>Total Value : {currency==='dollar'?'$': '€'}{currency==='dollar'?(this.calculateTotal()*1.0).toFixed(2):(this.calculateTotal()*euroExchangeRate).toFixed(2)}</h6>\r\n                    <br />\r\n                    <Modal header='Add Stock' bottomSheet\r\n                        trigger={<a className=\"waves-effect waves-light btn-small\"><i className=\"material-icons left\">add</i>Add Stocks </a>}>\r\n                        <Row>\r\n                            <Input s={12} label=\"Stock Symbol\" id=\"symbolName\" onChange={this.updateStockNameInput} required />\r\n                            <Input s={12} label=\"Quantity\" id=\"quantity\" onChange={this.updateQuantityInput} type=\"number\" required />\r\n                            <br/>\r\n                            <Button waves='light' onClick={this.addStock}>Create<Icon right>send</Icon></Button>\r\n                        </Row>\r\n                        \r\n                    </Modal>\r\n                    <a className=\"waves-effect waves-light btn-small green lighten-1\" onClick = {this.showGraph}>Show Graphs</a>     \r\n                </CardPanel>\r\n            </Col>)\r\n        )\r\n    }\r\n};\r\n\r\nexport default Portfolio;","import React,{Component} from 'react';\r\nimport Portfolio from './Portfolio';\r\nimport {Row} from 'react-materialize';\r\nclass Portfolios extends Component{\r\n    /*\r\n        Portfolios component holds hold the portfolios. \r\n    */\r\n    render(){\r\n        //Get the props to local variables so that it can be acessed below.\r\n        var addStock = this.props.addStock;\r\n        var deletePortfolio = this.props.deletePortfolio;\r\n        var deleteStock = this.props.deleteStock;\r\n        var stockValues = this.props.stockValues;\r\n        var euroExchangeRate = this.props.euroExchangeRate;\r\n        return( \r\n            <div>\r\n                <Row>\r\n                    {\r\n                        this.props.portfolios.map(function(portfolio){\r\n                            return  (<Portfolio title={portfolio.title} key={portfolio.id} id={portfolio.id} stocks={portfolio.stocks} addStock={addStock} deletePortfolio={deletePortfolio} deleteStock={deleteStock} stockValues={stockValues} euroExchangeRate={euroExchangeRate}/>)\r\n                        })\r\n                    }\r\n                </Row>  \r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Portfolios;","import React, { Component } from 'react';\nimport {Modal,Row,Input,Button,Icon} from 'react-materialize';\nimport Header from './Components/Header';\nimport Portfolios from './Components/Portfolios';\nimport AlphaVantage from './Helpers/AlphaVantage';\nimport constants from './Constants';\nconst randomstring = require(\"randomstring\");\nvar alphaVantage = new AlphaVantage();\nclass App extends Component {\n  //This is the main class\n  constructor(){\n    super();\n    this.state = {\n      portfolioNameInput : null,   //This gets updated when a user starts typing the portfolio name in create portfolio popup\n      portfolios : [], // This stores the list of portfolio. Each portfolio will contain a list of stocks inside it.\n      stockValues : {}, // This is a cache based system which will compute all the stock values when the user opens the website or adds a new stock.\n      euroExchangeRate : 0 //This gets updated when the user opens the website.\n    };\n    //Get the portfolios stored in the localstorage and set it to state if it exists\n    var portfolios = localStorage.getItem(\"portfolios\");  \n    if(portfolios)\n      this.state.portfolios = JSON.parse(portfolios);\n    //Compute stock prices for all symbols in portfolios\n    this.computeStockPrices();\n    //Gets the euro rate and updates the state.\n    this.getEuroRate();\n  }\n  componentDidUpdate(){\n    //Update the localstorage if anything in the state changes.\n    localStorage.setItem('portfolios',JSON.stringify(this.state.portfolios));\n  }\n  getEuroRate = async ()=>{\n    //This function fetches the euro rate and updates the state.\n    var euroRate = await alphaVantage.getEuroEchangeRate();\n    if(euroRate){\n      this.setState({\n        euroExchangeRate : euroRate\n      });\n    }else{\n      alert(\"Failed to fetch euro exchange rate\"); \n    }\n  }\n  computeStockPrices = async ()=>{\n    //This function finds all the stock prices and updates the state\n    for(let i = 0; i < this.state.portfolios.length; i++){\n      for(let j=0;j < this.state.portfolios[i].stocks.length; j++){\n          var value = await alphaVantage.getValue(this.state.portfolios[i].stocks[j].symbol);\n          var stockValues = this.state.stockValues;\n          stockValues[this.state.portfolios[i].stocks[j].symbol] = value;\n          this.setState({\n            stockValues \n          });\n      }\n    }\n  }\n  addPortfolio = (e)=>{\n    //This function adds a portfolio to the state\n    //If the maximum portfolops have reached alert the user\n    if(this.state.portfolios.length === constants.MAX_PORTFOLIO){\n      alert(\"You cannot create anymore portfolios\");\n    }\n    else{\n      //Add portfolio to state.\n      if(this.state.portfolioNameInput)\n      {\n        var portfolioName = this.state.portfolioNameInput;\n        this.setState({\n          portfolios : [...this.state.portfolios,{\n            id : randomstring.generate(),\n            title : portfolioName,\n            stocks : []\n          }]\n        },function(){\n          alert(\"Portfolio has been created\");\n        });\n      }\n      else  \n        alert(\"Portfolio Name cant be empty\");\n    }\n  }\n  deleteStock = (portfolioId,stockId)=>{\n    //This function takes in the portfolioId and the stockId of the stock to be deleted\n    var portfolios = this.state.portfolios;\n    for(let i = 0; i < portfolios.length; i++){\n      //Find the portfolio in which the stock is\n      if(portfolios[i].id === portfolioId){\n        var stocks = this.state.portfolios[i].stocks;\n        //Find the stock in that portfolio\n        for(let j = 0; j < stocks.length; j++){\n          if(stocks[j].id === stockId){\n            //Delete that stock\n            stocks.splice(j,1);\n            portfolios[i].stocks = stocks;\n            this.setState({\n              portfolios : portfolios\n            });\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n  deletePortfolio = (portfolioId)=>{\n    var portfolios = this.state.portfolios;\n    //Find the portfolio with the id\n    for(let i = 0; i < portfolios.length; i++){\n      if(portfolios[i].id === portfolioId){\n        //Delete that portfolio\n        portfolios.splice(i,1)\n        this.setState({\n          portfolios : portfolios \n        });\n        break;\n      }\n    }\n  }\n\n  updatePortfolioNameInput = (e)=>{\n    //This is binded to the create portfolio name input. updates the state\n    this.setState({\n      portfolioNameInput : e.target.value\n    });\n  }\n  addStock = async (portfolioId,stockName,quantity)=>{\n    //This function adds a stock of stockName and quantity to portfolio with portfolioId\n    //Get the value of the stock from the api.\n    var value = await alphaVantage.getValue(stockName);\n    var stockValues = this.state.stockValues;\n    stockValues[stockName.toUpperCase()] = value;\n    this.setState({\n      stockValues \n    });\n    //If the value of the stock was not fetchable alert the user\n    if(!value){\n      alert(\"Invalid Symbol\")\n      return false;\n    }else{\n      //If value is found add the stock to the portfolio\n      let portfolios = this.state.portfolios;\n      for(var i = 0; i < portfolios.length; i++){\n        if(portfolios[i].id === portfolioId){\n          if(portfolios[i].stocks.length === constants.MAX_SYMBOLS){\n            alert(\"Cannot create anymore stocks in this portfolio\");\n            return false;\n          }\n          portfolios[i].stocks.push({id : randomstring.generate(),symbol : stockName.toUpperCase(),value : value, quantity: quantity});\n          this.setState({\n            portfolios\n          });\n        }\n      } \n    }\n    return true;\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Modal header='Add Portfolio' bottomSheet id=\"createPortfolio\"\n          trigger={<a href=\"#portfolioForm\" className=\"btn-floating btn-large waves-effect waves-light red pulse\" style={{position : 'fixed',bottom : '10%', right : '10%' }}><i className=\"material-icons\">add</i></a>}>\n          <Row>\n            <Input s={12} label=\"Portfolio Name\" id=\"portfolioName\" onChange={this.updatePortfolioNameInput} required />\n            <br/>\n            <Button waves='light' onClick={this.addPortfolio}>Create<Icon right>send</Icon></Button>\n          </Row>\n          \n        </Modal>\n          \n        <Portfolios portfolios={this.state.portfolios} addStock={this.addStock} deletePortfolio={this.deletePortfolio} deleteStock={this.deleteStock}  stockValues={this.state.stockValues} euroExchangeRate={this.state.euroExchangeRate}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}